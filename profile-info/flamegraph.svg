<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="534" onload="init(evt)" viewBox="0 0 1200 534" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="534" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="517.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="517.00"> </text><svg id="frames" x="10" width="1180" total_samples="124"><g><title>__GI___clone (1 samples, 0.81%)</title><rect x="0.0000%" y="437" width="0.8065%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="447.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.81%)</title><rect x="0.0000%" y="421" width="0.8065%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="431.50"></text></g><g><title>do_syscall_64 (1 samples, 0.81%)</title><rect x="0.0000%" y="405" width="0.8065%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="415.50"></text></g><g><title>__do_sys_clone (1 samples, 0.81%)</title><rect x="0.0000%" y="389" width="0.8065%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="399.50"></text></g><g><title>kernel_clone (1 samples, 0.81%)</title><rect x="0.0000%" y="373" width="0.8065%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="383.50"></text></g><g><title>copy_process (1 samples, 0.81%)</title><rect x="0.0000%" y="357" width="0.8065%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="367.50"></text></g><g><title>perf_event_init_task (1 samples, 0.81%)</title><rect x="0.0000%" y="341" width="0.8065%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="351.50"></text></g><g><title>inherit_task_group.isra.0 (1 samples, 0.81%)</title><rect x="0.0000%" y="325" width="0.8065%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="1"/><text x="0.2500%" y="335.50"></text></g><g><title>inherit_event.constprop.0 (1 samples, 0.81%)</title><rect x="0.0000%" y="309" width="0.8065%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="1"/><text x="0.2500%" y="319.50"></text></g><g><title>perf_event_alloc (1 samples, 0.81%)</title><rect x="0.0000%" y="293" width="0.8065%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="1"/><text x="0.2500%" y="303.50"></text></g><g><title>perf_try_init_event (1 samples, 0.81%)</title><rect x="0.0000%" y="277" width="0.8065%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="1"/><text x="0.2500%" y="287.50"></text></g><g><title>x86_pmu_event_init (1 samples, 0.81%)</title><rect x="0.0000%" y="261" width="0.8065%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="1"/><text x="0.2500%" y="271.50"></text></g><g><title>allocate_fake_cpuc (1 samples, 0.81%)</title><rect x="0.0000%" y="245" width="0.8065%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="1"/><text x="0.2500%" y="255.50"></text></g><g><title>intel_cpuc_prepare (1 samples, 0.81%)</title><rect x="0.0000%" y="229" width="0.8065%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="1"/><text x="0.2500%" y="239.50"></text></g><g><title>kmem_cache_alloc_node_trace (1 samples, 0.81%)</title><rect x="0.0000%" y="213" width="0.8065%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="1"/><text x="0.2500%" y="223.50"></text></g><g><title>__x64_sys_futex (4 samples, 3.23%)</title><rect x="0.8065%" y="341" width="3.2258%" height="15" fill="rgb(231,73,38)" fg:x="1" fg:w="4"/><text x="1.0565%" y="351.50">__x..</text></g><g><title>do_futex (4 samples, 3.23%)</title><rect x="0.8065%" y="325" width="3.2258%" height="15" fill="rgb(225,20,46)" fg:x="1" fg:w="4"/><text x="1.0565%" y="335.50">do_..</text></g><g><title>futex_wait (4 samples, 3.23%)</title><rect x="0.8065%" y="309" width="3.2258%" height="15" fill="rgb(210,31,41)" fg:x="1" fg:w="4"/><text x="1.0565%" y="319.50">fut..</text></g><g><title>futex_wait_queue_me (4 samples, 3.23%)</title><rect x="0.8065%" y="293" width="3.2258%" height="15" fill="rgb(221,200,47)" fg:x="1" fg:w="4"/><text x="1.0565%" y="303.50">fut..</text></g><g><title>schedule (4 samples, 3.23%)</title><rect x="0.8065%" y="277" width="3.2258%" height="15" fill="rgb(226,26,5)" fg:x="1" fg:w="4"/><text x="1.0565%" y="287.50">sch..</text></g><g><title>__schedule (4 samples, 3.23%)</title><rect x="0.8065%" y="261" width="3.2258%" height="15" fill="rgb(249,33,26)" fg:x="1" fg:w="4"/><text x="1.0565%" y="271.50">__s..</text></g><g><title>finish_task_switch.isra.0 (4 samples, 3.23%)</title><rect x="0.8065%" y="245" width="3.2258%" height="15" fill="rgb(235,183,28)" fg:x="1" fg:w="4"/><text x="1.0565%" y="255.50">fin..</text></g><g><title>__perf_event_task_sched_in (4 samples, 3.23%)</title><rect x="0.8065%" y="229" width="3.2258%" height="15" fill="rgb(221,5,38)" fg:x="1" fg:w="4"/><text x="1.0565%" y="239.50">__p..</text></g><g><title>__intel_pmu_enable_all.constprop.0 (4 samples, 3.23%)</title><rect x="0.8065%" y="213" width="3.2258%" height="15" fill="rgb(247,18,42)" fg:x="1" fg:w="4"/><text x="1.0565%" y="223.50">__i..</text></g><g><title>native_write_msr (4 samples, 3.23%)</title><rect x="0.8065%" y="197" width="3.2258%" height="15" fill="rgb(241,131,45)" fg:x="1" fg:w="4"/><text x="1.0565%" y="207.50">nat..</text></g><g><title>[unknown] (6 samples, 4.84%)</title><rect x="0.0000%" y="453" width="4.8387%" height="15" fill="rgb(249,31,29)" fg:x="0" fg:w="6"/><text x="0.2500%" y="463.50">[unkno..</text></g><g><title>node_optrand_opt::main (5 samples, 4.03%)</title><rect x="0.8065%" y="437" width="4.0323%" height="15" fill="rgb(225,111,53)" fg:x="1" fg:w="5"/><text x="1.0565%" y="447.50">node..</text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn (5 samples, 4.03%)</title><rect x="0.8065%" y="421" width="4.0323%" height="15" fill="rgb(238,160,17)" fg:x="1" fg:w="5"/><text x="1.0565%" y="431.50">toki..</text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (5 samples, 4.03%)</title><rect x="0.8065%" y="405" width="4.0323%" height="15" fill="rgb(214,148,48)" fg:x="1" fg:w="5"/><text x="1.0565%" y="415.50">park..</text></g><g><title>syscall (5 samples, 4.03%)</title><rect x="0.8065%" y="389" width="4.0323%" height="15" fill="rgb(232,36,49)" fg:x="1" fg:w="5"/><text x="1.0565%" y="399.50">sysc..</text></g><g><title>entry_SYSCALL_64_after_hwframe (5 samples, 4.03%)</title><rect x="0.8065%" y="373" width="4.0323%" height="15" fill="rgb(209,103,24)" fg:x="1" fg:w="5"/><text x="1.0565%" y="383.50">entr..</text></g><g><title>do_syscall_64 (5 samples, 4.03%)</title><rect x="0.8065%" y="357" width="4.0323%" height="15" fill="rgb(229,88,8)" fg:x="1" fg:w="5"/><text x="1.0565%" y="367.50">do_s..</text></g><g><title>syscall_exit_to_user_mode (1 samples, 0.81%)</title><rect x="4.0323%" y="341" width="0.8065%" height="15" fill="rgb(213,181,19)" fg:x="5" fg:w="1"/><text x="4.2823%" y="351.50"></text></g><g><title>exit_to_user_mode_prepare (1 samples, 0.81%)</title><rect x="4.0323%" y="325" width="0.8065%" height="15" fill="rgb(254,191,54)" fg:x="5" fg:w="1"/><text x="4.2823%" y="335.50"></text></g><g><title>switch_fpu_return (1 samples, 0.81%)</title><rect x="4.0323%" y="309" width="0.8065%" height="15" fill="rgb(241,83,37)" fg:x="5" fg:w="1"/><text x="4.2823%" y="319.50"></text></g><g><title>__restore_fpregs_from_fpstate (1 samples, 0.81%)</title><rect x="4.0323%" y="293" width="0.8065%" height="15" fill="rgb(233,36,39)" fg:x="5" fg:w="1"/><text x="4.2823%" y="303.50"></text></g><g><title>calculate_sigpending (2 samples, 1.61%)</title><rect x="4.8387%" y="421" width="1.6129%" height="15" fill="rgb(226,3,54)" fg:x="6" fg:w="2"/><text x="5.0887%" y="431.50"></text></g><g><title>recalc_sigpending (1 samples, 0.81%)</title><rect x="5.6452%" y="405" width="0.8065%" height="15" fill="rgb(245,192,40)" fg:x="7" fg:w="1"/><text x="5.8952%" y="415.50"></text></g><g><title>__intel_pmu_enable_all.constprop.0 (44 samples, 35.48%)</title><rect x="8.0645%" y="373" width="35.4839%" height="15" fill="rgb(238,167,29)" fg:x="10" fg:w="44"/><text x="8.3145%" y="383.50">__intel_pmu_enable_all.constprop.0</text></g><g><title>native_write_msr (44 samples, 35.48%)</title><rect x="8.0645%" y="357" width="35.4839%" height="15" fill="rgb(232,182,51)" fg:x="10" fg:w="44"/><text x="8.3145%" y="367.50">native_write_msr</text></g><g><title>schedule_tail (47 samples, 37.90%)</title><rect x="6.4516%" y="421" width="37.9032%" height="15" fill="rgb(231,60,39)" fg:x="8" fg:w="47"/><text x="6.7016%" y="431.50">schedule_tail</text></g><g><title>finish_task_switch.isra.0 (46 samples, 37.10%)</title><rect x="7.2581%" y="405" width="37.0968%" height="15" fill="rgb(208,69,12)" fg:x="9" fg:w="46"/><text x="7.5081%" y="415.50">finish_task_switch.isra.0</text></g><g><title>__perf_event_task_sched_in (45 samples, 36.29%)</title><rect x="8.0645%" y="389" width="36.2903%" height="15" fill="rgb(235,93,37)" fg:x="10" fg:w="45"/><text x="8.3145%" y="399.50">__perf_event_task_sched_in</text></g><g><title>_raw_spin_unlock (1 samples, 0.81%)</title><rect x="43.5484%" y="373" width="0.8065%" height="15" fill="rgb(213,116,39)" fg:x="54" fg:w="1"/><text x="43.7984%" y="383.50"></text></g><g><title>ret_from_fork (50 samples, 40.32%)</title><rect x="4.8387%" y="437" width="40.3226%" height="15" fill="rgb(222,207,29)" fg:x="6" fg:w="50"/><text x="5.0887%" y="447.50">ret_from_fork</text></g><g><title>syscall_exit_to_user_mode (1 samples, 0.81%)</title><rect x="44.3548%" y="421" width="0.8065%" height="15" fill="rgb(206,96,30)" fg:x="55" fg:w="1"/><text x="44.6048%" y="431.50"></text></g><g><title>syscall_exit_work (1 samples, 0.81%)</title><rect x="44.3548%" y="405" width="0.8065%" height="15" fill="rgb(218,138,4)" fg:x="55" fg:w="1"/><text x="44.6048%" y="415.50"></text></g><g><title>__audit_syscall_exit (1 samples, 0.81%)</title><rect x="44.3548%" y="389" width="0.8065%" height="15" fill="rgb(250,191,14)" fg:x="55" fg:w="1"/><text x="44.6048%" y="399.50"></text></g><g><title>__sigaltstack (1 samples, 0.81%)</title><rect x="45.1613%" y="373" width="0.8065%" height="15" fill="rgb(239,60,40)" fg:x="56" fg:w="1"/><text x="45.4113%" y="383.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.81%)</title><rect x="45.1613%" y="357" width="0.8065%" height="15" fill="rgb(206,27,48)" fg:x="56" fg:w="1"/><text x="45.4113%" y="367.50"></text></g><g><title>do_syscall_64 (1 samples, 0.81%)</title><rect x="45.1613%" y="341" width="0.8065%" height="15" fill="rgb(225,35,8)" fg:x="56" fg:w="1"/><text x="45.4113%" y="351.50"></text></g><g><title>__x64_sys_sigaltstack (1 samples, 0.81%)</title><rect x="45.1613%" y="325" width="0.8065%" height="15" fill="rgb(250,213,24)" fg:x="56" fg:w="1"/><text x="45.4113%" y="335.50"></text></g><g><title>do_sigaltstack.constprop.0 (1 samples, 0.81%)</title><rect x="45.1613%" y="309" width="0.8065%" height="15" fill="rgb(247,123,22)" fg:x="56" fg:w="1"/><text x="45.4113%" y="319.50"></text></g><g><title>__GI___mmap64 (1 samples, 0.81%)</title><rect x="45.9677%" y="341" width="0.8065%" height="15" fill="rgb(231,138,38)" fg:x="57" fg:w="1"/><text x="46.2177%" y="351.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.81%)</title><rect x="45.9677%" y="325" width="0.8065%" height="15" fill="rgb(231,145,46)" fg:x="57" fg:w="1"/><text x="46.2177%" y="335.50"></text></g><g><title>do_syscall_64 (1 samples, 0.81%)</title><rect x="45.9677%" y="309" width="0.8065%" height="15" fill="rgb(251,118,11)" fg:x="57" fg:w="1"/><text x="46.2177%" y="319.50"></text></g><g><title>ksys_mmap_pgoff (1 samples, 0.81%)</title><rect x="45.9677%" y="293" width="0.8065%" height="15" fill="rgb(217,147,25)" fg:x="57" fg:w="1"/><text x="46.2177%" y="303.50"></text></g><g><title>vm_mmap_pgoff (1 samples, 0.81%)</title><rect x="45.9677%" y="277" width="0.8065%" height="15" fill="rgb(247,81,37)" fg:x="57" fg:w="1"/><text x="46.2177%" y="287.50"></text></g><g><title>do_mmap (1 samples, 0.81%)</title><rect x="45.9677%" y="261" width="0.8065%" height="15" fill="rgb(209,12,38)" fg:x="57" fg:w="1"/><text x="46.2177%" y="271.50"></text></g><g><title>mmap_region (1 samples, 0.81%)</title><rect x="45.9677%" y="245" width="0.8065%" height="15" fill="rgb(227,1,9)" fg:x="57" fg:w="1"/><text x="46.2177%" y="255.50"></text></g><g><title>perf_event_mmap (1 samples, 0.81%)</title><rect x="45.9677%" y="229" width="0.8065%" height="15" fill="rgb(248,47,43)" fg:x="57" fg:w="1"/><text x="46.2177%" y="239.50"></text></g><g><title>perf_iterate_sb (1 samples, 0.81%)</title><rect x="45.9677%" y="213" width="0.8065%" height="15" fill="rgb(221,10,30)" fg:x="57" fg:w="1"/><text x="46.2177%" y="223.50"></text></g><g><title>perf_iterate_ctx (1 samples, 0.81%)</title><rect x="45.9677%" y="197" width="0.8065%" height="15" fill="rgb(210,229,1)" fg:x="57" fg:w="1"/><text x="46.2177%" y="207.50"></text></g><g><title>__GI___mprotect (1 samples, 0.81%)</title><rect x="46.7742%" y="341" width="0.8065%" height="15" fill="rgb(222,148,37)" fg:x="58" fg:w="1"/><text x="47.0242%" y="351.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.81%)</title><rect x="46.7742%" y="325" width="0.8065%" height="15" fill="rgb(234,67,33)" fg:x="58" fg:w="1"/><text x="47.0242%" y="335.50"></text></g><g><title>do_syscall_64 (1 samples, 0.81%)</title><rect x="46.7742%" y="309" width="0.8065%" height="15" fill="rgb(247,98,35)" fg:x="58" fg:w="1"/><text x="47.0242%" y="319.50"></text></g><g><title>__x64_sys_mprotect (1 samples, 0.81%)</title><rect x="46.7742%" y="293" width="0.8065%" height="15" fill="rgb(247,138,52)" fg:x="58" fg:w="1"/><text x="47.0242%" y="303.50"></text></g><g><title>do_mprotect_pkey (1 samples, 0.81%)</title><rect x="46.7742%" y="277" width="0.8065%" height="15" fill="rgb(213,79,30)" fg:x="58" fg:w="1"/><text x="47.0242%" y="287.50"></text></g><g><title>mprotect_fixup (1 samples, 0.81%)</title><rect x="46.7742%" y="261" width="0.8065%" height="15" fill="rgb(246,177,23)" fg:x="58" fg:w="1"/><text x="47.0242%" y="271.50"></text></g><g><title>__split_vma (1 samples, 0.81%)</title><rect x="46.7742%" y="245" width="0.8065%" height="15" fill="rgb(230,62,27)" fg:x="58" fg:w="1"/><text x="47.0242%" y="255.50"></text></g><g><title>__vma_adjust (1 samples, 0.81%)</title><rect x="46.7742%" y="229" width="0.8065%" height="15" fill="rgb(216,154,8)" fg:x="58" fg:w="1"/><text x="47.0242%" y="239.50"></text></g><g><title>__rb_insert_augmented (1 samples, 0.81%)</title><rect x="46.7742%" y="213" width="0.8065%" height="15" fill="rgb(244,35,45)" fg:x="58" fg:w="1"/><text x="47.0242%" y="223.50"></text></g><g><title>__GI___clone (54 samples, 43.55%)</title><rect x="4.8387%" y="453" width="43.5484%" height="15" fill="rgb(251,115,12)" fg:x="6" fg:w="54"/><text x="5.0887%" y="463.50">__GI___clone</text></g><g><title>start_thread (4 samples, 3.23%)</title><rect x="45.1613%" y="437" width="3.2258%" height="15" fill="rgb(240,54,50)" fg:x="56" fg:w="4"/><text x="45.4113%" y="447.50">sta..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (4 samples, 3.23%)</title><rect x="45.1613%" y="421" width="3.2258%" height="15" fill="rgb(233,84,52)" fg:x="56" fg:w="4"/><text x="45.4113%" y="431.50">std..</text></g><g><title>std::sys::unix::stack_overflow::Handler::new (4 samples, 3.23%)</title><rect x="45.1613%" y="405" width="3.2258%" height="15" fill="rgb(207,117,47)" fg:x="56" fg:w="4"/><text x="45.4113%" y="415.50">std..</text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (4 samples, 3.23%)</title><rect x="45.1613%" y="389" width="3.2258%" height="15" fill="rgb(249,43,39)" fg:x="56" fg:w="4"/><text x="45.4113%" y="399.50">std..</text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (3 samples, 2.42%)</title><rect x="45.9677%" y="373" width="2.4194%" height="15" fill="rgb(209,38,44)" fg:x="57" fg:w="3"/><text x="46.2177%" y="383.50">st..</text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (3 samples, 2.42%)</title><rect x="45.9677%" y="357" width="2.4194%" height="15" fill="rgb(236,212,23)" fg:x="57" fg:w="3"/><text x="46.2177%" y="367.50">st..</text></g><g><title>std::sys::unix::os::page_size (1 samples, 0.81%)</title><rect x="47.5806%" y="341" width="0.8065%" height="15" fill="rgb(242,79,21)" fg:x="59" fg:w="1"/><text x="47.8306%" y="351.50"></text></g><g><title>__GI___sysconf (1 samples, 0.81%)</title><rect x="47.5806%" y="325" width="0.8065%" height="15" fill="rgb(211,96,35)" fg:x="59" fg:w="1"/><text x="47.8306%" y="335.50"></text></g><g><title>_start (1 samples, 0.81%)</title><rect x="48.3871%" y="453" width="0.8065%" height="15" fill="rgb(253,215,40)" fg:x="60" fg:w="1"/><text x="48.6371%" y="463.50"></text></g><g><title>_dl_start (1 samples, 0.81%)</title><rect x="48.3871%" y="437" width="0.8065%" height="15" fill="rgb(211,81,21)" fg:x="60" fg:w="1"/><text x="48.6371%" y="447.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.81%)</title><rect x="48.3871%" y="421" width="0.8065%" height="15" fill="rgb(208,190,38)" fg:x="60" fg:w="1"/><text x="48.6371%" y="431.50"></text></g><g><title>dl_main (1 samples, 0.81%)</title><rect x="48.3871%" y="405" width="0.8065%" height="15" fill="rgb(235,213,38)" fg:x="60" fg:w="1"/><text x="48.6371%" y="415.50"></text></g><g><title>_dl_map_object_deps (1 samples, 0.81%)</title><rect x="48.3871%" y="389" width="0.8065%" height="15" fill="rgb(237,122,38)" fg:x="60" fg:w="1"/><text x="48.6371%" y="399.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.81%)</title><rect x="48.3871%" y="373" width="0.8065%" height="15" fill="rgb(244,218,35)" fg:x="60" fg:w="1"/><text x="48.6371%" y="383.50"></text></g><g><title>openaux (1 samples, 0.81%)</title><rect x="48.3871%" y="357" width="0.8065%" height="15" fill="rgb(240,68,47)" fg:x="60" fg:w="1"/><text x="48.6371%" y="367.50"></text></g><g><title>_dl_map_object (1 samples, 0.81%)</title><rect x="48.3871%" y="341" width="0.8065%" height="15" fill="rgb(210,16,53)" fg:x="60" fg:w="1"/><text x="48.6371%" y="351.50"></text></g><g><title>open_path (1 samples, 0.81%)</title><rect x="48.3871%" y="325" width="0.8065%" height="15" fill="rgb(235,124,12)" fg:x="60" fg:w="1"/><text x="48.6371%" y="335.50"></text></g><g><title>open_verify.constprop.0 (1 samples, 0.81%)</title><rect x="48.3871%" y="309" width="0.8065%" height="15" fill="rgb(224,169,11)" fg:x="60" fg:w="1"/><text x="48.6371%" y="319.50"></text></g><g><title>__GI___open_nocancel (1 samples, 0.81%)</title><rect x="48.3871%" y="293" width="0.8065%" height="15" fill="rgb(250,166,2)" fg:x="60" fg:w="1"/><text x="48.6371%" y="303.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.81%)</title><rect x="48.3871%" y="277" width="0.8065%" height="15" fill="rgb(242,216,29)" fg:x="60" fg:w="1"/><text x="48.6371%" y="287.50"></text></g><g><title>do_syscall_64 (1 samples, 0.81%)</title><rect x="48.3871%" y="261" width="0.8065%" height="15" fill="rgb(230,116,27)" fg:x="60" fg:w="1"/><text x="48.6371%" y="271.50"></text></g><g><title>__x64_sys_openat (1 samples, 0.81%)</title><rect x="48.3871%" y="245" width="0.8065%" height="15" fill="rgb(228,99,48)" fg:x="60" fg:w="1"/><text x="48.6371%" y="255.50"></text></g><g><title>do_sys_openat2 (1 samples, 0.81%)</title><rect x="48.3871%" y="229" width="0.8065%" height="15" fill="rgb(253,11,6)" fg:x="60" fg:w="1"/><text x="48.6371%" y="239.50"></text></g><g><title>do_filp_open (1 samples, 0.81%)</title><rect x="48.3871%" y="213" width="0.8065%" height="15" fill="rgb(247,143,39)" fg:x="60" fg:w="1"/><text x="48.6371%" y="223.50"></text></g><g><title>path_openat (1 samples, 0.81%)</title><rect x="48.3871%" y="197" width="0.8065%" height="15" fill="rgb(236,97,10)" fg:x="60" fg:w="1"/><text x="48.6371%" y="207.50"></text></g><g><title>link_path_walk (1 samples, 0.81%)</title><rect x="48.3871%" y="181" width="0.8065%" height="15" fill="rgb(233,208,19)" fg:x="60" fg:w="1"/><text x="48.6371%" y="191.50"></text></g><g><title>inode_permission (1 samples, 0.81%)</title><rect x="48.3871%" y="165" width="0.8065%" height="15" fill="rgb(216,164,2)" fg:x="60" fg:w="1"/><text x="48.6371%" y="175.50"></text></g><g><title>[[fuse]] (1 samples, 0.81%)</title><rect x="48.3871%" y="149" width="0.8065%" height="15" fill="rgb(220,129,5)" fg:x="60" fg:w="1"/><text x="48.6371%" y="159.50"></text></g><g><title>[[fuse]] (1 samples, 0.81%)</title><rect x="48.3871%" y="133" width="0.8065%" height="15" fill="rgb(242,17,10)" fg:x="60" fg:w="1"/><text x="48.6371%" y="143.50"></text></g><g><title>[[fuse]] (1 samples, 0.81%)</title><rect x="48.3871%" y="117" width="0.8065%" height="15" fill="rgb(242,107,0)" fg:x="60" fg:w="1"/><text x="48.6371%" y="127.50"></text></g><g><title>[[fuse]] (1 samples, 0.81%)</title><rect x="48.3871%" y="101" width="0.8065%" height="15" fill="rgb(251,28,31)" fg:x="60" fg:w="1"/><text x="48.6371%" y="111.50"></text></g><g><title>schedule (1 samples, 0.81%)</title><rect x="48.3871%" y="85" width="0.8065%" height="15" fill="rgb(233,223,10)" fg:x="60" fg:w="1"/><text x="48.6371%" y="95.50"></text></g><g><title>__schedule (1 samples, 0.81%)</title><rect x="48.3871%" y="69" width="0.8065%" height="15" fill="rgb(215,21,27)" fg:x="60" fg:w="1"/><text x="48.6371%" y="79.50"></text></g><g><title>psi_task_switch (1 samples, 0.81%)</title><rect x="48.3871%" y="53" width="0.8065%" height="15" fill="rgb(232,23,21)" fg:x="60" fg:w="1"/><text x="48.6371%" y="63.50"></text></g><g><title>psi_group_change (1 samples, 0.81%)</title><rect x="48.3871%" y="37" width="0.8065%" height="15" fill="rgb(244,5,23)" fg:x="60" fg:w="1"/><text x="48.6371%" y="47.50"></text></g><g><title>__clear_user (5 samples, 4.03%)</title><rect x="49.1935%" y="357" width="4.0323%" height="15" fill="rgb(226,81,46)" fg:x="61" fg:w="5"/><text x="49.4435%" y="367.50">__cl..</text></g><g><title>asm_exc_page_fault (5 samples, 4.03%)</title><rect x="49.1935%" y="341" width="4.0323%" height="15" fill="rgb(247,70,30)" fg:x="61" fg:w="5"/><text x="49.4435%" y="351.50">asm_..</text></g><g><title>exc_page_fault (5 samples, 4.03%)</title><rect x="49.1935%" y="325" width="4.0323%" height="15" fill="rgb(212,68,19)" fg:x="61" fg:w="5"/><text x="49.4435%" y="335.50">exc_..</text></g><g><title>do_user_addr_fault (5 samples, 4.03%)</title><rect x="49.1935%" y="309" width="4.0323%" height="15" fill="rgb(240,187,13)" fg:x="61" fg:w="5"/><text x="49.4435%" y="319.50">do_u..</text></g><g><title>handle_mm_fault (5 samples, 4.03%)</title><rect x="49.1935%" y="293" width="4.0323%" height="15" fill="rgb(223,113,26)" fg:x="61" fg:w="5"/><text x="49.4435%" y="303.50">hand..</text></g><g><title>__handle_mm_fault (5 samples, 4.03%)</title><rect x="49.1935%" y="277" width="4.0323%" height="15" fill="rgb(206,192,2)" fg:x="61" fg:w="5"/><text x="49.4435%" y="287.50">__ha..</text></g><g><title>__do_fault (5 samples, 4.03%)</title><rect x="49.1935%" y="261" width="4.0323%" height="15" fill="rgb(241,108,4)" fg:x="61" fg:w="5"/><text x="49.4435%" y="271.50">__do..</text></g><g><title>filemap_fault (5 samples, 4.03%)</title><rect x="49.1935%" y="245" width="4.0323%" height="15" fill="rgb(247,173,49)" fg:x="61" fg:w="5"/><text x="49.4435%" y="255.50">file..</text></g><g><title>wait_on_page_bit_common (5 samples, 4.03%)</title><rect x="49.1935%" y="229" width="4.0323%" height="15" fill="rgb(224,114,35)" fg:x="61" fg:w="5"/><text x="49.4435%" y="239.50">wait..</text></g><g><title>io_schedule (5 samples, 4.03%)</title><rect x="49.1935%" y="213" width="4.0323%" height="15" fill="rgb(245,159,27)" fg:x="61" fg:w="5"/><text x="49.4435%" y="223.50">io_s..</text></g><g><title>schedule (5 samples, 4.03%)</title><rect x="49.1935%" y="197" width="4.0323%" height="15" fill="rgb(245,172,44)" fg:x="61" fg:w="5"/><text x="49.4435%" y="207.50">sche..</text></g><g><title>__schedule (5 samples, 4.03%)</title><rect x="49.1935%" y="181" width="4.0323%" height="15" fill="rgb(236,23,11)" fg:x="61" fg:w="5"/><text x="49.4435%" y="191.50">__sc..</text></g><g><title>finish_task_switch.isra.0 (5 samples, 4.03%)</title><rect x="49.1935%" y="165" width="4.0323%" height="15" fill="rgb(205,117,38)" fg:x="61" fg:w="5"/><text x="49.4435%" y="175.50">fini..</text></g><g><title>__perf_event_task_sched_in (5 samples, 4.03%)</title><rect x="49.1935%" y="149" width="4.0323%" height="15" fill="rgb(237,72,25)" fg:x="61" fg:w="5"/><text x="49.4435%" y="159.50">__pe..</text></g><g><title>__intel_pmu_enable_all.constprop.0 (5 samples, 4.03%)</title><rect x="49.1935%" y="133" width="4.0323%" height="15" fill="rgb(244,70,9)" fg:x="61" fg:w="5"/><text x="49.4435%" y="143.50">__in..</text></g><g><title>native_write_msr (5 samples, 4.03%)</title><rect x="49.1935%" y="117" width="4.0323%" height="15" fill="rgb(217,125,39)" fg:x="61" fg:w="5"/><text x="49.4435%" y="127.50">nati..</text></g><g><title>begin_new_exec (1 samples, 0.81%)</title><rect x="53.2258%" y="357" width="0.8065%" height="15" fill="rgb(235,36,10)" fg:x="66" fg:w="1"/><text x="53.4758%" y="367.50"></text></g><g><title>flush_signal_handlers (1 samples, 0.81%)</title><rect x="53.2258%" y="341" width="0.8065%" height="15" fill="rgb(251,123,47)" fg:x="66" fg:w="1"/><text x="53.4758%" y="351.50"></text></g><g><title>node-optrand-op (68 samples, 54.84%)</title><rect x="0.0000%" y="469" width="54.8387%" height="15" fill="rgb(221,13,13)" fg:x="0" fg:w="68"/><text x="0.2500%" y="479.50">node-optrand-op</text></g><g><title>entry_SYSCALL_64_after_hwframe (7 samples, 5.65%)</title><rect x="49.1935%" y="453" width="5.6452%" height="15" fill="rgb(238,131,9)" fg:x="61" fg:w="7"/><text x="49.4435%" y="463.50">entry_S..</text></g><g><title>do_syscall_64 (7 samples, 5.65%)</title><rect x="49.1935%" y="437" width="5.6452%" height="15" fill="rgb(211,50,8)" fg:x="61" fg:w="7"/><text x="49.4435%" y="447.50">do_sysc..</text></g><g><title>__x64_sys_execve (7 samples, 5.65%)</title><rect x="49.1935%" y="421" width="5.6452%" height="15" fill="rgb(245,182,24)" fg:x="61" fg:w="7"/><text x="49.4435%" y="431.50">__x64_s..</text></g><g><title>do_execveat_common.isra.0 (7 samples, 5.65%)</title><rect x="49.1935%" y="405" width="5.6452%" height="15" fill="rgb(242,14,37)" fg:x="61" fg:w="7"/><text x="49.4435%" y="415.50">do_exec..</text></g><g><title>bprm_execve (7 samples, 5.65%)</title><rect x="49.1935%" y="389" width="5.6452%" height="15" fill="rgb(246,228,12)" fg:x="61" fg:w="7"/><text x="49.4435%" y="399.50">bprm_ex..</text></g><g><title>load_elf_binary (7 samples, 5.65%)</title><rect x="49.1935%" y="373" width="5.6452%" height="15" fill="rgb(213,55,15)" fg:x="61" fg:w="7"/><text x="49.4435%" y="383.50">load_el..</text></g><g><title>elf_map (1 samples, 0.81%)</title><rect x="54.0323%" y="357" width="0.8065%" height="15" fill="rgb(209,9,3)" fg:x="67" fg:w="1"/><text x="54.2823%" y="367.50"></text></g><g><title>vm_mmap_pgoff (1 samples, 0.81%)</title><rect x="54.0323%" y="341" width="0.8065%" height="15" fill="rgb(230,59,30)" fg:x="67" fg:w="1"/><text x="54.2823%" y="351.50"></text></g><g><title>do_mmap (1 samples, 0.81%)</title><rect x="54.0323%" y="325" width="0.8065%" height="15" fill="rgb(209,121,21)" fg:x="67" fg:w="1"/><text x="54.2823%" y="335.50"></text></g><g><title>mmap_region (1 samples, 0.81%)</title><rect x="54.0323%" y="309" width="0.8065%" height="15" fill="rgb(220,109,13)" fg:x="67" fg:w="1"/><text x="54.2823%" y="319.50"></text></g><g><title>perf-exec (5 samples, 4.03%)</title><rect x="54.8387%" y="469" width="4.0323%" height="15" fill="rgb(232,18,1)" fg:x="68" fg:w="5"/><text x="55.0887%" y="479.50">perf..</text></g><g><title>entry_SYSCALL_64_after_hwframe (5 samples, 4.03%)</title><rect x="54.8387%" y="453" width="4.0323%" height="15" fill="rgb(215,41,42)" fg:x="68" fg:w="5"/><text x="55.0887%" y="463.50">entr..</text></g><g><title>do_syscall_64 (5 samples, 4.03%)</title><rect x="54.8387%" y="437" width="4.0323%" height="15" fill="rgb(224,123,36)" fg:x="68" fg:w="5"/><text x="55.0887%" y="447.50">do_s..</text></g><g><title>__x64_sys_execve (5 samples, 4.03%)</title><rect x="54.8387%" y="421" width="4.0323%" height="15" fill="rgb(240,125,3)" fg:x="68" fg:w="5"/><text x="55.0887%" y="431.50">__x6..</text></g><g><title>do_execveat_common.isra.0 (5 samples, 4.03%)</title><rect x="54.8387%" y="405" width="4.0323%" height="15" fill="rgb(205,98,50)" fg:x="68" fg:w="5"/><text x="55.0887%" y="415.50">do_e..</text></g><g><title>bprm_execve (5 samples, 4.03%)</title><rect x="54.8387%" y="389" width="4.0323%" height="15" fill="rgb(205,185,37)" fg:x="68" fg:w="5"/><text x="55.0887%" y="399.50">bprm..</text></g><g><title>load_elf_binary (5 samples, 4.03%)</title><rect x="54.8387%" y="373" width="4.0323%" height="15" fill="rgb(238,207,15)" fg:x="68" fg:w="5"/><text x="55.0887%" y="383.50">load..</text></g><g><title>begin_new_exec (5 samples, 4.03%)</title><rect x="54.8387%" y="357" width="4.0323%" height="15" fill="rgb(213,199,42)" fg:x="68" fg:w="5"/><text x="55.0887%" y="367.50">begi..</text></g><g><title>perf_event_exec (5 samples, 4.03%)</title><rect x="54.8387%" y="341" width="4.0323%" height="15" fill="rgb(235,201,11)" fg:x="68" fg:w="5"/><text x="55.0887%" y="351.50">perf..</text></g><g><title>__intel_pmu_enable_all.constprop.0 (5 samples, 4.03%)</title><rect x="54.8387%" y="325" width="4.0323%" height="15" fill="rgb(207,46,11)" fg:x="68" fg:w="5"/><text x="55.0887%" y="335.50">__in..</text></g><g><title>native_write_msr (5 samples, 4.03%)</title><rect x="54.8387%" y="309" width="4.0323%" height="15" fill="rgb(241,35,35)" fg:x="68" fg:w="5"/><text x="55.0887%" y="319.50">nati..</text></g><g><title>__GI___mprotect (2 samples, 1.61%)</title><rect x="58.8710%" y="261" width="1.6129%" height="15" fill="rgb(243,32,47)" fg:x="73" fg:w="2"/><text x="59.1210%" y="271.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (2 samples, 1.61%)</title><rect x="58.8710%" y="245" width="1.6129%" height="15" fill="rgb(247,202,23)" fg:x="73" fg:w="2"/><text x="59.1210%" y="255.50"></text></g><g><title>do_syscall_64 (2 samples, 1.61%)</title><rect x="58.8710%" y="229" width="1.6129%" height="15" fill="rgb(219,102,11)" fg:x="73" fg:w="2"/><text x="59.1210%" y="239.50"></text></g><g><title>__x64_sys_mprotect (2 samples, 1.61%)</title><rect x="58.8710%" y="213" width="1.6129%" height="15" fill="rgb(243,110,44)" fg:x="73" fg:w="2"/><text x="59.1210%" y="223.50"></text></g><g><title>do_mprotect_pkey (2 samples, 1.61%)</title><rect x="58.8710%" y="197" width="1.6129%" height="15" fill="rgb(222,74,54)" fg:x="73" fg:w="2"/><text x="59.1210%" y="207.50"></text></g><g><title>mprotect_fixup (1 samples, 0.81%)</title><rect x="59.6774%" y="181" width="0.8065%" height="15" fill="rgb(216,99,12)" fg:x="74" fg:w="1"/><text x="59.9274%" y="191.50"></text></g><g><title>perf_event_mmap (1 samples, 0.81%)</title><rect x="59.6774%" y="165" width="0.8065%" height="15" fill="rgb(226,22,26)" fg:x="74" fg:w="1"/><text x="59.9274%" y="175.50"></text></g><g><title>perf_iterate_sb (1 samples, 0.81%)</title><rect x="59.6774%" y="149" width="0.8065%" height="15" fill="rgb(217,163,10)" fg:x="74" fg:w="1"/><text x="59.9274%" y="159.50"></text></g><g><title>perf_iterate_ctx (1 samples, 0.81%)</title><rect x="59.6774%" y="133" width="0.8065%" height="15" fill="rgb(213,25,53)" fg:x="74" fg:w="1"/><text x="59.9274%" y="143.50"></text></g><g><title>perf_event_mmap_output (1 samples, 0.81%)</title><rect x="59.6774%" y="117" width="0.8065%" height="15" fill="rgb(252,105,26)" fg:x="74" fg:w="1"/><text x="59.9274%" y="127.50"></text></g><g><title>__GI_munmap (1 samples, 0.81%)</title><rect x="60.4839%" y="261" width="0.8065%" height="15" fill="rgb(220,39,43)" fg:x="75" fg:w="1"/><text x="60.7339%" y="271.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.81%)</title><rect x="60.4839%" y="245" width="0.8065%" height="15" fill="rgb(229,68,48)" fg:x="75" fg:w="1"/><text x="60.7339%" y="255.50"></text></g><g><title>do_syscall_64 (1 samples, 0.81%)</title><rect x="60.4839%" y="229" width="0.8065%" height="15" fill="rgb(252,8,32)" fg:x="75" fg:w="1"/><text x="60.7339%" y="239.50"></text></g><g><title>__x64_sys_munmap (1 samples, 0.81%)</title><rect x="60.4839%" y="213" width="0.8065%" height="15" fill="rgb(223,20,43)" fg:x="75" fg:w="1"/><text x="60.7339%" y="223.50"></text></g><g><title>__vm_munmap (1 samples, 0.81%)</title><rect x="60.4839%" y="197" width="0.8065%" height="15" fill="rgb(229,81,49)" fg:x="75" fg:w="1"/><text x="60.7339%" y="207.50"></text></g><g><title>__do_munmap (1 samples, 0.81%)</title><rect x="60.4839%" y="181" width="0.8065%" height="15" fill="rgb(236,28,36)" fg:x="75" fg:w="1"/><text x="60.7339%" y="191.50"></text></g><g><title>unmap_region (1 samples, 0.81%)</title><rect x="60.4839%" y="165" width="0.8065%" height="15" fill="rgb(249,185,26)" fg:x="75" fg:w="1"/><text x="60.7339%" y="175.50"></text></g><g><title>lru_add_drain (1 samples, 0.81%)</title><rect x="60.4839%" y="149" width="0.8065%" height="15" fill="rgb(249,174,33)" fg:x="75" fg:w="1"/><text x="60.7339%" y="159.50"></text></g><g><title>lru_add_drain_cpu (1 samples, 0.81%)</title><rect x="60.4839%" y="133" width="0.8065%" height="15" fill="rgb(233,201,37)" fg:x="75" fg:w="1"/><text x="60.7339%" y="143.50"></text></g><g><title>pagevec_lru_move_fn (1 samples, 0.81%)</title><rect x="60.4839%" y="117" width="0.8065%" height="15" fill="rgb(221,78,26)" fg:x="75" fg:w="1"/><text x="60.7339%" y="127.50"></text></g><g><title>__activate_page (1 samples, 0.81%)</title><rect x="60.4839%" y="101" width="0.8065%" height="15" fill="rgb(250,127,30)" fg:x="75" fg:w="1"/><text x="60.7339%" y="111.50"></text></g><g><title>std::sys::unix::thread::guard::current (4 samples, 3.23%)</title><rect x="58.8710%" y="357" width="3.2258%" height="15" fill="rgb(230,49,44)" fg:x="73" fg:w="4"/><text x="59.1210%" y="367.50">std..</text></g><g><title>__pthread_getattr_np (4 samples, 3.23%)</title><rect x="58.8710%" y="341" width="3.2258%" height="15" fill="rgb(229,67,23)" fg:x="73" fg:w="4"/><text x="59.1210%" y="351.50">__p..</text></g><g><title>__GI___libc_malloc (4 samples, 3.23%)</title><rect x="58.8710%" y="325" width="3.2258%" height="15" fill="rgb(249,83,47)" fg:x="73" fg:w="4"/><text x="59.1210%" y="335.50">__G..</text></g><g><title>tcache_init.part.0 (4 samples, 3.23%)</title><rect x="58.8710%" y="309" width="3.2258%" height="15" fill="rgb(215,43,3)" fg:x="73" fg:w="4"/><text x="59.1210%" y="319.50">tca..</text></g><g><title>arena_get2.part.0 (4 samples, 3.23%)</title><rect x="58.8710%" y="293" width="3.2258%" height="15" fill="rgb(238,154,13)" fg:x="73" fg:w="4"/><text x="59.1210%" y="303.50">are..</text></g><g><title>new_heap (4 samples, 3.23%)</title><rect x="58.8710%" y="277" width="3.2258%" height="15" fill="rgb(219,56,2)" fg:x="73" fg:w="4"/><text x="59.1210%" y="287.50">new..</text></g><g><title>asm_exc_page_fault (1 samples, 0.81%)</title><rect x="61.2903%" y="261" width="0.8065%" height="15" fill="rgb(233,0,4)" fg:x="76" fg:w="1"/><text x="61.5403%" y="271.50"></text></g><g><title>exc_page_fault (1 samples, 0.81%)</title><rect x="61.2903%" y="245" width="0.8065%" height="15" fill="rgb(235,30,7)" fg:x="76" fg:w="1"/><text x="61.5403%" y="255.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.81%)</title><rect x="61.2903%" y="229" width="0.8065%" height="15" fill="rgb(250,79,13)" fg:x="76" fg:w="1"/><text x="61.5403%" y="239.50"></text></g><g><title>handle_mm_fault (1 samples, 0.81%)</title><rect x="61.2903%" y="213" width="0.8065%" height="15" fill="rgb(211,146,34)" fg:x="76" fg:w="1"/><text x="61.5403%" y="223.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.81%)</title><rect x="61.2903%" y="197" width="0.8065%" height="15" fill="rgb(228,22,38)" fg:x="76" fg:w="1"/><text x="61.5403%" y="207.50"></text></g><g><title>__pte_alloc (1 samples, 0.81%)</title><rect x="61.2903%" y="181" width="0.8065%" height="15" fill="rgb(235,168,5)" fg:x="76" fg:w="1"/><text x="61.5403%" y="191.50"></text></g><g><title>pte_alloc_one (1 samples, 0.81%)</title><rect x="61.2903%" y="165" width="0.8065%" height="15" fill="rgb(221,155,16)" fg:x="76" fg:w="1"/><text x="61.5403%" y="175.50"></text></g><g><title>__alloc_pages (1 samples, 0.81%)</title><rect x="61.2903%" y="149" width="0.8065%" height="15" fill="rgb(215,215,53)" fg:x="76" fg:w="1"/><text x="61.5403%" y="159.50"></text></g><g><title>get_page_from_freelist (1 samples, 0.81%)</title><rect x="61.2903%" y="133" width="0.8065%" height="15" fill="rgb(223,4,10)" fg:x="76" fg:w="1"/><text x="61.5403%" y="143.50"></text></g><g><title>__list_del_entry_valid (1 samples, 0.81%)</title><rect x="61.2903%" y="117" width="0.8065%" height="15" fill="rgb(234,103,6)" fg:x="76" fg:w="1"/><text x="61.5403%" y="127.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (11 samples, 8.87%)</title><rect x="62.0968%" y="341" width="8.8710%" height="15" fill="rgb(227,97,0)" fg:x="77" fg:w="11"/><text x="62.3468%" y="351.50">parking_lot::..</text></g><g><title>syscall (10 samples, 8.06%)</title><rect x="62.9032%" y="325" width="8.0645%" height="15" fill="rgb(234,150,53)" fg:x="78" fg:w="10"/><text x="63.1532%" y="335.50">syscall</text></g><g><title>entry_SYSCALL_64_after_hwframe (10 samples, 8.06%)</title><rect x="62.9032%" y="309" width="8.0645%" height="15" fill="rgb(228,201,54)" fg:x="78" fg:w="10"/><text x="63.1532%" y="319.50">entry_SYSCA..</text></g><g><title>do_syscall_64 (10 samples, 8.06%)</title><rect x="62.9032%" y="293" width="8.0645%" height="15" fill="rgb(222,22,37)" fg:x="78" fg:w="10"/><text x="63.1532%" y="303.50">do_syscall_..</text></g><g><title>__x64_sys_futex (10 samples, 8.06%)</title><rect x="62.9032%" y="277" width="8.0645%" height="15" fill="rgb(237,53,32)" fg:x="78" fg:w="10"/><text x="63.1532%" y="287.50">__x64_sys_f..</text></g><g><title>do_futex (10 samples, 8.06%)</title><rect x="62.9032%" y="261" width="8.0645%" height="15" fill="rgb(233,25,53)" fg:x="78" fg:w="10"/><text x="63.1532%" y="271.50">do_futex</text></g><g><title>futex_wait (10 samples, 8.06%)</title><rect x="62.9032%" y="245" width="8.0645%" height="15" fill="rgb(210,40,34)" fg:x="78" fg:w="10"/><text x="63.1532%" y="255.50">futex_wait</text></g><g><title>futex_wait_queue_me (10 samples, 8.06%)</title><rect x="62.9032%" y="229" width="8.0645%" height="15" fill="rgb(241,220,44)" fg:x="78" fg:w="10"/><text x="63.1532%" y="239.50">futex_wait_..</text></g><g><title>schedule (10 samples, 8.06%)</title><rect x="62.9032%" y="213" width="8.0645%" height="15" fill="rgb(235,28,35)" fg:x="78" fg:w="10"/><text x="63.1532%" y="223.50">schedule</text></g><g><title>__schedule (10 samples, 8.06%)</title><rect x="62.9032%" y="197" width="8.0645%" height="15" fill="rgb(210,56,17)" fg:x="78" fg:w="10"/><text x="63.1532%" y="207.50">__schedule</text></g><g><title>finish_task_switch.isra.0 (10 samples, 8.06%)</title><rect x="62.9032%" y="181" width="8.0645%" height="15" fill="rgb(224,130,29)" fg:x="78" fg:w="10"/><text x="63.1532%" y="191.50">finish_task..</text></g><g><title>__perf_event_task_sched_in (10 samples, 8.06%)</title><rect x="62.9032%" y="165" width="8.0645%" height="15" fill="rgb(235,212,8)" fg:x="78" fg:w="10"/><text x="63.1532%" y="175.50">__perf_even..</text></g><g><title>__intel_pmu_enable_all.constprop.0 (10 samples, 8.06%)</title><rect x="62.9032%" y="149" width="8.0645%" height="15" fill="rgb(223,33,50)" fg:x="78" fg:w="10"/><text x="63.1532%" y="159.50">__intel_pmu..</text></g><g><title>native_write_msr (10 samples, 8.06%)</title><rect x="62.9032%" y="133" width="8.0645%" height="15" fill="rgb(219,149,13)" fg:x="78" fg:w="10"/><text x="63.1532%" y="143.50">native_writ..</text></g><g><title>do_sched_yield (1 samples, 0.81%)</title><rect x="70.9677%" y="229" width="0.8065%" height="15" fill="rgb(250,156,29)" fg:x="88" fg:w="1"/><text x="71.2177%" y="239.50"></text></g><g><title>yield_task_fair (1 samples, 0.81%)</title><rect x="70.9677%" y="213" width="0.8065%" height="15" fill="rgb(216,193,19)" fg:x="88" fg:w="1"/><text x="71.2177%" y="223.50"></text></g><g><title>__GI___sched_yield (2 samples, 1.61%)</title><rect x="70.9677%" y="293" width="1.6129%" height="15" fill="rgb(216,135,14)" fg:x="88" fg:w="2"/><text x="71.2177%" y="303.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (2 samples, 1.61%)</title><rect x="70.9677%" y="277" width="1.6129%" height="15" fill="rgb(241,47,5)" fg:x="88" fg:w="2"/><text x="71.2177%" y="287.50"></text></g><g><title>do_syscall_64 (2 samples, 1.61%)</title><rect x="70.9677%" y="261" width="1.6129%" height="15" fill="rgb(233,42,35)" fg:x="88" fg:w="2"/><text x="71.2177%" y="271.50"></text></g><g><title>__ia32_sys_sched_yield (2 samples, 1.61%)</title><rect x="70.9677%" y="245" width="1.6129%" height="15" fill="rgb(231,13,6)" fg:x="88" fg:w="2"/><text x="71.2177%" y="255.50"></text></g><g><title>schedule (1 samples, 0.81%)</title><rect x="71.7742%" y="229" width="0.8065%" height="15" fill="rgb(207,181,40)" fg:x="89" fg:w="1"/><text x="72.0242%" y="239.50"></text></g><g><title>__schedule (1 samples, 0.81%)</title><rect x="71.7742%" y="213" width="0.8065%" height="15" fill="rgb(254,173,49)" fg:x="89" fg:w="1"/><text x="72.0242%" y="223.50"></text></g><g><title>update_rq_clock (1 samples, 0.81%)</title><rect x="71.7742%" y="197" width="0.8065%" height="15" fill="rgb(221,1,38)" fg:x="89" fg:w="1"/><text x="72.0242%" y="207.50"></text></g><g><title>sched_clock_cpu (1 samples, 0.81%)</title><rect x="71.7742%" y="181" width="0.8065%" height="15" fill="rgb(206,124,46)" fg:x="89" fg:w="1"/><text x="72.0242%" y="191.50"></text></g><g><title>native_sched_clock (1 samples, 0.81%)</title><rect x="71.7742%" y="165" width="0.8065%" height="15" fill="rgb(249,21,11)" fg:x="89" fg:w="1"/><text x="72.0242%" y="175.50"></text></g><g><title>__x64_sys_futex (30 samples, 24.19%)</title><rect x="72.5806%" y="229" width="24.1935%" height="15" fill="rgb(222,201,40)" fg:x="90" fg:w="30"/><text x="72.8306%" y="239.50">__x64_sys_futex</text></g><g><title>do_futex (30 samples, 24.19%)</title><rect x="72.5806%" y="213" width="24.1935%" height="15" fill="rgb(235,61,29)" fg:x="90" fg:w="30"/><text x="72.8306%" y="223.50">do_futex</text></g><g><title>futex_wait (30 samples, 24.19%)</title><rect x="72.5806%" y="197" width="24.1935%" height="15" fill="rgb(219,207,3)" fg:x="90" fg:w="30"/><text x="72.8306%" y="207.50">futex_wait</text></g><g><title>futex_wait_queue_me (30 samples, 24.19%)</title><rect x="72.5806%" y="181" width="24.1935%" height="15" fill="rgb(222,56,46)" fg:x="90" fg:w="30"/><text x="72.8306%" y="191.50">futex_wait_queue_me</text></g><g><title>schedule (30 samples, 24.19%)</title><rect x="72.5806%" y="165" width="24.1935%" height="15" fill="rgb(239,76,54)" fg:x="90" fg:w="30"/><text x="72.8306%" y="175.50">schedule</text></g><g><title>__schedule (30 samples, 24.19%)</title><rect x="72.5806%" y="149" width="24.1935%" height="15" fill="rgb(231,124,27)" fg:x="90" fg:w="30"/><text x="72.8306%" y="159.50">__schedule</text></g><g><title>finish_task_switch.isra.0 (30 samples, 24.19%)</title><rect x="72.5806%" y="133" width="24.1935%" height="15" fill="rgb(249,195,6)" fg:x="90" fg:w="30"/><text x="72.8306%" y="143.50">finish_task_switch.isra.0</text></g><g><title>__perf_event_task_sched_in (30 samples, 24.19%)</title><rect x="72.5806%" y="117" width="24.1935%" height="15" fill="rgb(237,174,47)" fg:x="90" fg:w="30"/><text x="72.8306%" y="127.50">__perf_event_task_sched_in</text></g><g><title>__intel_pmu_enable_all.constprop.0 (30 samples, 24.19%)</title><rect x="72.5806%" y="101" width="24.1935%" height="15" fill="rgb(206,201,31)" fg:x="90" fg:w="30"/><text x="72.8306%" y="111.50">__intel_pmu_enable_all.constprop.0</text></g><g><title>native_write_msr (30 samples, 24.19%)</title><rect x="72.5806%" y="85" width="24.1935%" height="15" fill="rgb(231,57,52)" fg:x="90" fg:w="30"/><text x="72.8306%" y="95.50">native_write_msr</text></g><g><title>_raw_spin_lock_irq (1 samples, 0.81%)</title><rect x="96.7742%" y="165" width="0.8065%" height="15" fill="rgb(248,177,22)" fg:x="120" fg:w="1"/><text x="97.0242%" y="175.50"></text></g><g><title>native_queued_spin_lock_slowpath (1 samples, 0.81%)</title><rect x="96.7742%" y="149" width="0.8065%" height="15" fill="rgb(215,211,37)" fg:x="120" fg:w="1"/><text x="97.0242%" y="159.50"></text></g><g><title>__GI___clone (49 samples, 39.52%)</title><rect x="58.8710%" y="453" width="39.5161%" height="15" fill="rgb(241,128,51)" fg:x="73" fg:w="49"/><text x="59.1210%" y="463.50">__GI___clone</text></g><g><title>start_thread (49 samples, 39.52%)</title><rect x="58.8710%" y="437" width="39.5161%" height="15" fill="rgb(227,165,31)" fg:x="73" fg:w="49"/><text x="59.1210%" y="447.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (49 samples, 39.52%)</title><rect x="58.8710%" y="421" width="39.5161%" height="15" fill="rgb(228,167,24)" fg:x="73" fg:w="49"/><text x="59.1210%" y="431.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (49 samples, 39.52%)</title><rect x="58.8710%" y="405" width="39.5161%" height="15" fill="rgb(228,143,12)" fg:x="73" fg:w="49"/><text x="59.1210%" y="415.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::c..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (49 samples, 39.52%)</title><rect x="58.8710%" y="389" width="39.5161%" height="15" fill="rgb(249,149,8)" fg:x="73" fg:w="49"/><text x="59.1210%" y="399.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::c..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (49 samples, 39.52%)</title><rect x="58.8710%" y="373" width="39.5161%" height="15" fill="rgb(243,35,44)" fg:x="73" fg:w="49"/><text x="59.1210%" y="383.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (45 samples, 36.29%)</title><rect x="62.0968%" y="357" width="36.2903%" height="15" fill="rgb(246,89,9)" fg:x="77" fg:w="45"/><text x="62.3468%" y="367.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>tokio::runtime::task::raw::poll (34 samples, 27.42%)</title><rect x="70.9677%" y="341" width="27.4194%" height="15" fill="rgb(233,213,13)" fg:x="88" fg:w="34"/><text x="71.2177%" y="351.50">tokio::runtime::task::raw::poll</text></g><g><title>tokio::runtime::thread_pool::worker::Context::park_timeout (34 samples, 27.42%)</title><rect x="70.9677%" y="325" width="27.4194%" height="15" fill="rgb(233,141,41)" fg:x="88" fg:w="34"/><text x="71.2177%" y="335.50">tokio::runtime::thread_pool::worker::Context..</text></g><g><title>&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (34 samples, 27.42%)</title><rect x="70.9677%" y="309" width="27.4194%" height="15" fill="rgb(239,167,4)" fg:x="88" fg:w="34"/><text x="71.2177%" y="319.50">&lt;tokio::runtime::park::Parker as tokio::park..</text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (32 samples, 25.81%)</title><rect x="72.5806%" y="293" width="25.8065%" height="15" fill="rgb(209,217,16)" fg:x="90" fg:w="32"/><text x="72.8306%" y="303.50">parking_lot::condvar::Condvar::wait_until..</text></g><g><title>syscall (32 samples, 25.81%)</title><rect x="72.5806%" y="277" width="25.8065%" height="15" fill="rgb(219,88,35)" fg:x="90" fg:w="32"/><text x="72.8306%" y="287.50">syscall</text></g><g><title>entry_SYSCALL_64_after_hwframe (32 samples, 25.81%)</title><rect x="72.5806%" y="261" width="25.8065%" height="15" fill="rgb(220,193,23)" fg:x="90" fg:w="32"/><text x="72.8306%" y="271.50">entry_SYSCALL_64_after_hwframe</text></g><g><title>do_syscall_64 (32 samples, 25.81%)</title><rect x="72.5806%" y="245" width="25.8065%" height="15" fill="rgb(230,90,52)" fg:x="90" fg:w="32"/><text x="72.8306%" y="255.50">do_syscall_64</text></g><g><title>syscall_exit_to_user_mode (2 samples, 1.61%)</title><rect x="96.7742%" y="229" width="1.6129%" height="15" fill="rgb(252,106,19)" fg:x="120" fg:w="2"/><text x="97.0242%" y="239.50"></text></g><g><title>exit_to_user_mode_prepare (2 samples, 1.61%)</title><rect x="96.7742%" y="213" width="1.6129%" height="15" fill="rgb(206,74,20)" fg:x="120" fg:w="2"/><text x="97.0242%" y="223.50"></text></g><g><title>arch_do_signal_or_restart (2 samples, 1.61%)</title><rect x="96.7742%" y="197" width="1.6129%" height="15" fill="rgb(230,138,44)" fg:x="120" fg:w="2"/><text x="97.0242%" y="207.50"></text></g><g><title>get_signal (2 samples, 1.61%)</title><rect x="96.7742%" y="181" width="1.6129%" height="15" fill="rgb(235,182,43)" fg:x="120" fg:w="2"/><text x="97.0242%" y="191.50"></text></g><g><title>do_group_exit (1 samples, 0.81%)</title><rect x="97.5806%" y="165" width="0.8065%" height="15" fill="rgb(242,16,51)" fg:x="121" fg:w="1"/><text x="97.8306%" y="175.50"></text></g><g><title>do_exit (1 samples, 0.81%)</title><rect x="97.5806%" y="149" width="0.8065%" height="15" fill="rgb(248,9,4)" fg:x="121" fg:w="1"/><text x="97.8306%" y="159.50"></text></g><g><title>exit_mm_release (1 samples, 0.81%)</title><rect x="97.5806%" y="133" width="0.8065%" height="15" fill="rgb(210,31,22)" fg:x="121" fg:w="1"/><text x="97.8306%" y="143.50"></text></g><g><title>futex_exit_release (1 samples, 0.81%)</title><rect x="97.5806%" y="117" width="0.8065%" height="15" fill="rgb(239,54,39)" fg:x="121" fg:w="1"/><text x="97.8306%" y="127.50"></text></g><g><title>mutex_lock (1 samples, 0.81%)</title><rect x="97.5806%" y="101" width="0.8065%" height="15" fill="rgb(230,99,41)" fg:x="121" fg:w="1"/><text x="97.8306%" y="111.50"></text></g><g><title>mm_update_next_owner (1 samples, 0.81%)</title><rect x="98.3871%" y="325" width="0.8065%" height="15" fill="rgb(253,106,12)" fg:x="122" fg:w="1"/><text x="98.6371%" y="335.50"></text></g><g><title>all (124 samples, 100%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(213,46,41)" fg:x="0" fg:w="124"/><text x="0.2500%" y="495.50"></text></g><g><title>tokio-runtime-w (51 samples, 41.13%)</title><rect x="58.8710%" y="469" width="41.1290%" height="15" fill="rgb(215,133,35)" fg:x="73" fg:w="51"/><text x="59.1210%" y="479.50">tokio-runtime-w</text></g><g><title>entry_SYSCALL_64_after_hwframe (2 samples, 1.61%)</title><rect x="98.3871%" y="453" width="1.6129%" height="15" fill="rgb(213,28,5)" fg:x="122" fg:w="2"/><text x="98.6371%" y="463.50"></text></g><g><title>do_syscall_64 (2 samples, 1.61%)</title><rect x="98.3871%" y="437" width="1.6129%" height="15" fill="rgb(215,77,49)" fg:x="122" fg:w="2"/><text x="98.6371%" y="447.50"></text></g><g><title>syscall_exit_to_user_mode (2 samples, 1.61%)</title><rect x="98.3871%" y="421" width="1.6129%" height="15" fill="rgb(248,100,22)" fg:x="122" fg:w="2"/><text x="98.6371%" y="431.50"></text></g><g><title>exit_to_user_mode_prepare (2 samples, 1.61%)</title><rect x="98.3871%" y="405" width="1.6129%" height="15" fill="rgb(208,67,9)" fg:x="122" fg:w="2"/><text x="98.6371%" y="415.50"></text></g><g><title>arch_do_signal_or_restart (2 samples, 1.61%)</title><rect x="98.3871%" y="389" width="1.6129%" height="15" fill="rgb(219,133,21)" fg:x="122" fg:w="2"/><text x="98.6371%" y="399.50"></text></g><g><title>get_signal (2 samples, 1.61%)</title><rect x="98.3871%" y="373" width="1.6129%" height="15" fill="rgb(246,46,29)" fg:x="122" fg:w="2"/><text x="98.6371%" y="383.50"></text></g><g><title>do_group_exit (2 samples, 1.61%)</title><rect x="98.3871%" y="357" width="1.6129%" height="15" fill="rgb(246,185,52)" fg:x="122" fg:w="2"/><text x="98.6371%" y="367.50"></text></g><g><title>do_exit (2 samples, 1.61%)</title><rect x="98.3871%" y="341" width="1.6129%" height="15" fill="rgb(252,136,11)" fg:x="122" fg:w="2"/><text x="98.6371%" y="351.50"></text></g><g><title>mmput (1 samples, 0.81%)</title><rect x="99.1935%" y="325" width="0.8065%" height="15" fill="rgb(219,138,53)" fg:x="123" fg:w="1"/><text x="99.4435%" y="335.50"></text></g><g><title>exit_mmap (1 samples, 0.81%)</title><rect x="99.1935%" y="309" width="0.8065%" height="15" fill="rgb(211,51,23)" fg:x="123" fg:w="1"/><text x="99.4435%" y="319.50"></text></g><g><title>tlb_finish_mmu (1 samples, 0.81%)</title><rect x="99.1935%" y="293" width="0.8065%" height="15" fill="rgb(247,221,28)" fg:x="123" fg:w="1"/><text x="99.4435%" y="303.50"></text></g><g><title>free_pages_and_swap_cache (1 samples, 0.81%)</title><rect x="99.1935%" y="277" width="0.8065%" height="15" fill="rgb(251,222,45)" fg:x="123" fg:w="1"/><text x="99.4435%" y="287.50"></text></g><g><title>free_swap_cache (1 samples, 0.81%)</title><rect x="99.1935%" y="261" width="0.8065%" height="15" fill="rgb(217,162,53)" fg:x="123" fg:w="1"/><text x="99.4435%" y="271.50"></text></g></svg></svg>